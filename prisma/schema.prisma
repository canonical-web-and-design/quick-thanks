// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int           @id @default(autoincrement())
  email                         String?       @unique
  emailVerified                 DateTime?     @map("email_verified")
  name                          String?
  image                         String?
  receivedRecognitions          Recognition[] @relation(name: "author")
  givenRecognitions             Recognition[] @relation(name: "recipient")
  receivedVillagerPoints        Int           @default(0)
  receivedExplorerPoints        Int           @default(0)
  remainingVillagerPointsToGive Int           @default(5)
  remainingExplorerPointsToGive Int           @default(5)
  Account                       Account[]
  Session                       Session[]
}

model Recognition {
  id          Int     @id @default(autoincrement())
  published   Boolean
  content     String
  recipient   User    @relation("recipient", fields: [recipientId], references: [id])
  recipientId Int
  author      User    @relation("author", fields: [authorId], references: [id])
  authorId    Int
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
